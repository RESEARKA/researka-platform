import React, { useState } from 'react';
import {
  Box,
  Button,
  FormControl,
  FormLabel,
  FormHelperText,
  Textarea,
  Select,
  VStack,
  Heading,
  useToast,
  Flex,
  Slider,
  SliderTrack,
  SliderFilledTrack,
  SliderThumb,
  SliderMark,
  Tooltip,
  useColorModeValue,
  Text,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Divider,
  Switch,
  HStack,
} from '@chakra-ui/react';
import { FiSend, FiStar } from 'react-icons/fi';
import { submitReview, logUserReviews } from '../services/reviewService';
import { useAuth } from '../contexts/AuthContext';
import dynamic from 'next/dynamic';

// Dynamic import for the DeepSeekReviewAssistant to avoid SSR issues
const DynamicDeepSeekReviewAssistant = dynamic(
  () => import('./review/DeepSeekReviewAssistant'),
  { ssr: false }
);

interface ReviewFormProps {
  articleId: string;
  articleTitle: string;
  articleAbstract?: string;
  articleContent?: string;
  articleCategory?: string;
  onSuccess?: () => void;
  onCancel?: () => void;
}

// Define the review category scores interface
interface ReviewScores {
  originality: number;
  methodology: number;
  clarity: number;
  significance: number;
  technicalQuality: number;
  overall: number;
}

function ReviewForm({ 
  articleId, 
  articleTitle, 
  articleAbstract = '', 
  articleContent = '',
  articleCategory = 'general academic',
  onSuccess, 
  onCancel 
}: ReviewFormProps) {
  // Initialize all scores with default value of 3
  const [scores, setScores] = useState<ReviewScores>({
    originality: 3,
    methodology: 3,
    clarity: 3,
    significance: 3,
    technicalQuality: 3,
    overall: 3
  });
  const [recommendation, setRecommendation] = useState<'accept' | 'minor_revisions' | 'major_revisions' | 'reject'>('minor_revisions');
  const [content, setContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showTooltip, setShowTooltip] = useState<{[key: string]: boolean}>({
    originality: false,
    methodology: false,
    clarity: false,
    significance: false,
    technicalQuality: false,
    overall: false
  });
  const [useAI, setUseAI] = useState(true);
  const [aiSuggestions, setAiSuggestions] = useState<any[]>([]);
  const { currentUser, getUserProfile } = useAuth();
  const toast = useToast();
  
  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.700');

  // Update a specific score category
  const updateScore = (category: keyof ReviewScores, value: number) => {
    setScores(prev => {
      const newScores = { ...prev, [category]: value };
      
      // Calculate overall score as average of all categories
      const { overall, ...categoryScores } = newScores;
      const sum = Object.values(categoryScores).reduce((a, b) => a + b, 0);
      const avg = sum / Object.values(categoryScores).length;
      
      return { ...newScores, overall: parseFloat(avg.toFixed(1)) };
    });
  };

  // Toggle tooltip visibility for a specific slider
  const toggleTooltip = (category: keyof ReviewScores, isVisible: boolean) => {
    setShowTooltip(prev => ({ ...prev, [category]: isVisible }));
  };

  // Handle AI suggestions
  const handleSuggestionsGenerated = (suggestions: any[]) => {
    setAiSuggestions(suggestions);
    
    // If there are suggestions, create a summary to add to the review content
    if (suggestions.length > 0) {
      const summaryPoints = suggestions
        .filter(s => s.severity === 'critical' || s.severity === 'warning')
        .map(s => `- ${s.title}`);
      
      if (summaryPoints.length > 0) {
        const aiSummary = `
## AI-Assisted Review Suggestions

The following points were identified by the AI assistant:

${summaryPoints.join('\n')}

*Note: These suggestions were generated by DeepSeek-V3-0324 AI and should be verified by the reviewer.*
`;
        
        // Only append if content doesn't already have the AI summary
        if (!content.includes('AI-Assisted Review Suggestions')) {
          setContent(prev => {
            const newContent = prev.trim() ? `${prev}\n\n${aiSummary}` : aiSummary;
            return newContent;
          });
        }
      }
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!currentUser) {
      toast({
        title: 'Authentication required',
        description: 'You must be logged in to submit a review',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
      return;
    }
    
    try {
      setIsSubmitting(true);
      
      // Get user profile to get the reviewer name
      const userProfile = await getUserProfile();
      
      if (!userProfile) {
        toast({
          title: 'Profile required',
          description: 'You must complete your profile before submitting a review',
          status: 'error',
          duration: 3000,
          isClosable: true,
        });
        return;
      }
      
      // Prepare review data
      const reviewData = {
        articleId,
        articleTitle,
        reviewerId: currentUser.uid,
        reviewerName: userProfile.displayName || userProfile.name || 'Anonymous Reviewer',
        score: scores.overall,
        scores: {
          originality: scores.originality,
          methodology: scores.methodology,
          clarity: scores.clarity,
          significance: scores.significance,
          technicalQuality: scores.technicalQuality
        },
        recommendation,
        content,
        aiAssisted: useAI && aiSuggestions.length > 0,
      };
      
      console.log('ReviewForm: Submitting review', reviewData);
      
      // Submit review
      await submitReview(reviewData);
      
      // Debug: Log all reviews for the current user
      console.log('ReviewForm: Logging all reviews for current user');
      await logUserReviews();
      
      toast({
        title: 'Review submitted',
        description: 'Your review has been successfully submitted',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
      
      // Reset form
      setScores({
        originality: 3,
        methodology: 3,
        clarity: 3,
        significance: 3,
        technicalQuality: 3,
        overall: 3
      });
      setRecommendation('minor_revisions');
      setContent('');
      
      // Call onSuccess callback if provided - this should trigger a refresh of the articles list
      if (onSuccess) {
        console.log('ReviewForm: Calling onSuccess callback to refresh articles');
        onSuccess();
      }
    } catch (error) {
      console.error('Error submitting review:', error);
      toast({
        title: 'Error',
        description: 'Failed to submit review. Please try again.',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Create a slider for a specific review category
  const renderScoreSlider = (
    category: keyof ReviewScores, 
    label: string, 
    description: string
  ) => (
    <FormControl id={`score-${category}`} mb={4}>
      <FormLabel>{label}</FormLabel>
      <Flex>
        <Box flex="1" pr={8}>
          <Slider
            id={`${category}-slider`}
            min={1}
            max={5}
            step={0.1}
            value={scores[category]}
            onChange={(val) => updateScore(category, val)}
            onMouseEnter={() => toggleTooltip(category, true)}
            onMouseLeave={() => toggleTooltip(category, false)}
          >
            <SliderMark value={1} mt={2} ml={-2.5} fontSize="sm">
              1
            </SliderMark>
            <SliderMark value={2} mt={2} ml={-2.5} fontSize="sm">
              2
            </SliderMark>
            <SliderMark value={3} mt={2} ml={-2.5} fontSize="sm">
              3
            </SliderMark>
            <SliderMark value={4} mt={2} ml={-2.5} fontSize="sm">
              4
            </SliderMark>
            <SliderMark value={5} mt={2} ml={-2.5} fontSize="sm">
              5
            </SliderMark>
            <SliderTrack>
              <SliderFilledTrack bg="purple.500" />
            </SliderTrack>
            <Tooltip
              hasArrow
              bg="purple.500"
              color="white"
              placement="top"
              isOpen={showTooltip[category]}
              label={`${scores[category].toFixed(1)}`}
            >
              <SliderThumb boxSize={6}>
                <Box color="purple.500" as={FiStar} />
              </SliderThumb>
            </Tooltip>
          </Slider>
        </Box>
        <Text fontWeight="bold" fontSize="xl">
          {scores[category].toFixed(1)}
        </Text>
      </Flex>
      <FormHelperText>{description}</FormHelperText>
    </FormControl>
  );

  return (
    <Box
      as="form"
      onSubmit={handleSubmit}
      bg={bgColor}
      p={6}
      borderRadius="md"
      borderWidth="1px"
      borderColor={borderColor}
      boxShadow="sm"
    >
      <VStack spacing={6} align="stretch">
        <Heading as="h3" size="md">
          Submit Review for "{articleTitle}"
        </Heading>
        
        <HStack>
          <Text>AI-Assisted Review</Text>
          <Switch 
            isChecked={useAI} 
            onChange={(e) => setUseAI(e.target.checked)}
            colorScheme="purple"
          />
        </HStack>
        
        <Tabs variant="enclosed" colorScheme="purple" isLazy>
          <TabList>
            <Tab>Review Form</Tab>
            {useAI && <Tab>AI Suggestions</Tab>}
          </TabList>
          
          <TabPanels>
            <TabPanel px={0}>
              <VStack spacing={6} align="stretch">
                <Box>
                  <Heading as="h4" size="sm" mb={4}>
                    Review Scores
                  </Heading>
                  
                  {renderScoreSlider(
                    'originality', 
                    'Originality/Novelty', 
                    'Evaluate the originality of ideas, concepts, or approaches'
                  )}
                  
                  {renderScoreSlider(
                    'methodology', 
                    'Methodology/Rigor', 
                    'Assess the soundness of research methods and analytical rigor'
                  )}
                  
                  {renderScoreSlider(
                    'clarity', 
                    'Clarity/Presentation', 
                    'Rate the clarity of writing, organization, and presentation'
                  )}
                  
                  {renderScoreSlider(
                    'significance', 
                    'Significance/Impact', 
                    'Evaluate the potential impact and significance of the work'
                  )}
                  
                  {renderScoreSlider(
                    'technicalQuality', 
                    'Technical Quality', 
                    'Assess the quality of technical implementation, code, or algorithms'
                  )}
                  
                  <Divider my={4} />
                  
                  <FormControl id="overall-score">
                    <FormLabel fontWeight="bold">Overall Score (Auto-calculated)</FormLabel>
                    <Flex>
                      <Box flex="1" pr={8}>
                        <Slider
                          id="overall-slider"
                          min={1}
                          max={5}
                          step={0.1}
                          value={scores.overall}
                          isReadOnly
                        >
                          <SliderMark value={1} mt={2} ml={-2.5} fontSize="sm">
                            1
                          </SliderMark>
                          <SliderMark value={2} mt={2} ml={-2.5} fontSize="sm">
                            2
                          </SliderMark>
                          <SliderMark value={3} mt={2} ml={-2.5} fontSize="sm">
                            3
                          </SliderMark>
                          <SliderMark value={4} mt={2} ml={-2.5} fontSize="sm">
                            4
                          </SliderMark>
                          <SliderMark value={5} mt={2} ml={-2.5} fontSize="sm">
                            5
                          </SliderMark>
                          <SliderTrack>
                            <SliderFilledTrack bg="purple.500" />
                          </SliderTrack>
                          <SliderThumb boxSize={6}>
                            <Box color="purple.500" as={FiStar} />
                          </SliderThumb>
                        </Slider>
                      </Box>
                      <Text fontWeight="bold" fontSize="xl">
                        {scores.overall.toFixed(1)}
                      </Text>
                    </Flex>
                    <FormHelperText>Average of all category scores</FormHelperText>
                  </FormControl>
                </Box>
                
                <FormControl id="recommendation" isRequired>
                  <FormLabel>Recommendation</FormLabel>
                  <Select
                    value={recommendation}
                    onChange={(e) => setRecommendation(e.target.value as any)}
                  >
                    <option value="accept">Accept (No Revisions Needed)</option>
                    <option value="minor_revisions">Accept with Minor Revisions</option>
                    <option value="major_revisions">Major Revisions Required</option>
                    <option value="reject">Reject</option>
                  </Select>
                  <FormHelperText>Your recommendation for this article</FormHelperText>
                </FormControl>
                
                <FormControl id="review-content" isRequired>
                  <FormLabel>Review Content</FormLabel>
                  <Textarea
                    value={content}
                    onChange={(e) => setContent(e.target.value)}
                    placeholder="Provide detailed feedback on the article..."
                    size="lg"
                    rows={10}
                  />
                  <FormHelperText>
                    Include specific feedback, suggestions for improvement, and justification for your scores
                  </FormHelperText>
                </FormControl>
                
                <Flex justify="space-between">
                  {onCancel && (
                    <Button 
                      onClick={onCancel}
                      colorScheme="gray"
                      isDisabled={isSubmitting}
                    >
                      Cancel
                    </Button>
                  )}
                  <Button 
                    type="submit"
                    colorScheme="purple"
                    isLoading={isSubmitting}
                    loadingText="Submitting..."
                    rightIcon={<FiSend />}
                    ml="auto"
                  >
                    Submit Review
                  </Button>
                </Flex>
              </VStack>
            </TabPanel>
            
            {useAI && (
              <TabPanel px={0}>
                {useAI && (
                  <DynamicDeepSeekReviewAssistant
                    article={{
                      id: articleId,
                      title: articleTitle,
                      abstract: articleAbstract,
                      content: articleContent,
                      category: articleCategory,
                    }}
                    onSuggestionsGenerated={handleSuggestionsGenerated}
                    autoAnalyze={true}
                  />
                )}
              </TabPanel>
            )}
          </TabPanels>
        </Tabs>
      </VStack>
    </Box>
  );
}

export default ReviewForm;
